// Code generated by MockGen. DO NOT EDIT.
// Source: tek-bank/internal/db/repository (interfaces: AccountRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/repository/account_repository_mock.go -package=repository tek-bank/internal/db/repository AccountRepository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	models "tek-bank/internal/db/models"
	repository "tek-bank/internal/db/repository"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountRepository) Create(arg0 models.Account) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepositoryMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepository)(nil).Create), arg0)
}

// DeleteToken mocks base method.
func (m *MockAccountRepository) DeleteToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockAccountRepositoryMockRecorder) DeleteToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockAccountRepository)(nil).DeleteToken), arg0, arg1)
}

// FindByAccountNumber mocks base method.
func (m *MockAccountRepository) FindByAccountNumber(arg0 int64) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountNumber", arg0)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountNumber indicates an expected call of FindByAccountNumber.
func (mr *MockAccountRepositoryMockRecorder) FindByAccountNumber(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountNumber", reflect.TypeOf((*MockAccountRepository)(nil).FindByAccountNumber), arg0)
}

// FindByIBAN mocks base method.
func (m *MockAccountRepository) FindByIBAN(arg0 string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIBAN", arg0)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIBAN indicates an expected call of FindByIBAN.
func (mr *MockAccountRepositoryMockRecorder) FindByIBAN(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIBAN", reflect.TypeOf((*MockAccountRepository)(nil).FindByIBAN), arg0)
}

// FindByOwnerId mocks base method.
func (m *MockAccountRepository) FindByOwnerId(arg0 string) ([]models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOwnerId", arg0)
	ret0, _ := ret[0].([]models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOwnerId indicates an expected call of FindByOwnerId.
func (mr *MockAccountRepositoryMockRecorder) FindByOwnerId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOwnerId", reflect.TypeOf((*MockAccountRepository)(nil).FindByOwnerId), arg0)
}

// GetToken mocks base method.
func (m *MockAccountRepository) GetToken(arg0 context.Context, arg1 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockAccountRepositoryMockRecorder) GetToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockAccountRepository)(nil).GetToken), arg0, arg1)
}

// SetToken mocks base method.
func (m *MockAccountRepository) SetToken(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetToken indicates an expected call of SetToken.
func (mr *MockAccountRepositoryMockRecorder) SetToken(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockAccountRepository)(nil).SetToken), arg0, arg1, arg2)
}

// UpdateBalance mocks base method.
func (m *MockAccountRepository) UpdateBalance(arg0 float64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockAccountRepositoryMockRecorder) UpdateBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockAccountRepository)(nil).UpdateBalance), arg0, arg1)
}

// WithTx mocks base method.
func (m *MockAccountRepository) WithTx(arg0 *gorm.DB) repository.AccountRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(repository.AccountRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockAccountRepositoryMockRecorder) WithTx(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockAccountRepository)(nil).WithTx), arg0)
}
