// Code generated by MockGen. DO NOT EDIT.
// Source: tek-bank/pkg/converter (interfaces: Converter)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/converter/converter_mock.go -package=converter tek-bank/pkg/converter Converter
//

// Package converter is a generated GoMock package.
package converter

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// CopyStruct mocks base method.
func (m *MockConverter) CopyStruct(arg0, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyStruct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyStruct indicates an expected call of CopyStruct.
func (mr *MockConverterMockRecorder) CopyStruct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyStruct", reflect.TypeOf((*MockConverter)(nil).CopyStruct), arg0, arg1)
}

// Stom mocks base method.
func (m *MockConverter) Stom(arg0 string, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stom", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stom indicates an expected call of Stom.
func (mr *MockConverterMockRecorder) Stom(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stom", reflect.TypeOf((*MockConverter)(nil).Stom), arg0, arg1)
}

// Stos mocks base method.
func (m *MockConverter) Stos(arg0 any) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stos", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stos indicates an expected call of Stos.
func (mr *MockConverterMockRecorder) Stos(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stos", reflect.TypeOf((*MockConverter)(nil).Stos), arg0)
}
