// Code generated by MockGen. DO NOT EDIT.
// Source: tek-bank/pkg/crypto (interfaces: Crypto)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/crypto/crypto_mock.go -package=crypto tek-bank/pkg/crypto Crypto
//

// Package crypto is a generated GoMock package.
package crypto

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCrypto is a mock of Crypto interface.
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto.
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance.
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockCrypto) CheckPasswordHash(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockCryptoMockRecorder) CheckPasswordHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockCrypto)(nil).CheckPasswordHash), arg0, arg1)
}

// GenerateToken mocks base method.
func (m *MockCrypto) GenerateToken(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockCryptoMockRecorder) GenerateToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockCrypto)(nil).GenerateToken), arg0)
}

// HashPassword mocks base method.
func (m *MockCrypto) HashPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockCryptoMockRecorder) HashPassword(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockCrypto)(nil).HashPassword), arg0)
}

// RandomIBAN mocks base method.
func (m *MockCrypto) RandomIBAN(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomIBAN", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// RandomIBAN indicates an expected call of RandomIBAN.
func (mr *MockCryptoMockRecorder) RandomIBAN(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomIBAN", reflect.TypeOf((*MockCrypto)(nil).RandomIBAN), arg0)
}

// RandomNumber mocks base method.
func (m *MockCrypto) RandomNumber() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomNumber")
	ret0, _ := ret[0].(int64)
	return ret0
}

// RandomNumber indicates an expected call of RandomNumber.
func (mr *MockCryptoMockRecorder) RandomNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomNumber", reflect.TypeOf((*MockCrypto)(nil).RandomNumber))
}

// RandomPassword mocks base method.
func (m *MockCrypto) RandomPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// RandomPassword indicates an expected call of RandomPassword.
func (mr *MockCryptoMockRecorder) RandomPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomPassword", reflect.TypeOf((*MockCrypto)(nil).RandomPassword))
}
